# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET     /                               controllers.Core.index(page: Int ?= 1, count: Int ?= 10)

GET     /admin/reindex                  controllers.Admin.reindex

GET     /api/project                    controllers.api.Project.index(callback: Option[String])
PUT     /api/project/:projectId/ticket  controllers.api.Ticket.create(projectId: Long, callback: Option[String])
GET     /api/project/:id/assignees      controllers.api.Project.assignableUsers(id: Long, callback: Option[String])
GET     /api/project/:id                controllers.api.Project.item(id: Long, callback: Option[String])

GET     /api/search                     controllers.api.Search.index(page: Int ?= 1, count: Int ?= 10, query: String ?= "*", sort: Option[String] = None, order: Option[String] = None, callback: Option[String])

POST    /api/third/bitbucket/commit     controllers.api.third.BitBucket.commit
POST    /api/third/github/commit        controllers.api.third.GitHub.commit

POST    /api/ticket/:ticketId/assign    controllers.api.Ticket.assign(ticketId: String, callback: Option[String])
GET     /api/ticket/:ticketId/comment   controllers.api.Ticket.comment(ticketId: String, type: Option[String], callback: Option[String])
PUT     /api/ticket/:ticketId/comment   controllers.api.Ticket.addComment(ticketId: String, callback: Option[String])
DELETE  /api/ticket/:ticketId/comment/:id controllers.api.Ticket.deleteComment(ticketId: String, id: Long, callback: Option[String])
POST    /api/ticket/:ticketId/resolve   controllers.api.Ticket.resolve(ticketId: String, callback: Option[String])
POST    /api/ticket/:ticketId/unresolve controllers.api.Ticket.unresolve(ticketId: String, callback: Option[String])
POST    /api/ticket/:ticketId/status    controllers.api.Ticket.changeStatus(ticketId: String, callback: Option[String])
GET     /api/ticket/:ticketId/link      controllers.api.Ticket.links(ticketId: String, callback: Option[String])
PUT     /api/ticket/:ticketId/link      controllers.api.Ticket.link(ticketId: String, callback: Option[String])
DELETE  /api/ticket/:ticketId/link/:id  controllers.api.Ticket.deleteLink(ticketId: String, id: Long, callback: Option[String])
GET     /api/ticket/:id                 controllers.api.Ticket.item(id: String, callback: Option[String])

GET     /api/ticketlinktype             controllers.api.TicketLinkType.index(callback: Option[String])
GET 	  /api/ticketlinktype/:id 		    controllers.api.TicketLinkType.item(id: Long, callback: Option[String])

GET     /api/ticketpriority             controllers.api.TicketPriority.index(callback: Option[String])
GET 	  /api/ticketpriority/:id 		    controllers.api.TicketPriority.item(id: Long, callback: Option[String])

GET     /api/ticketresolution           controllers.api.TicketResolution.index(callback: Option[String])
GET     /api/ticketresolution/:id       controllers.api.TicketResolution.item(id: Long, callback: Option[String])

GET     /api/ticketseverity             controllers.api.TicketSeverity.index(callback: Option[String])
GET 	  /api/ticketseverity/:id 		    controllers.api.TicketSeverity.item(id: Long, callback: Option[String])

GET     /api/tickettype                 controllers.api.TicketType.index(callback: Option[String])
GET 	  /api/tickettype/:id 			      controllers.api.TicketType.item(id: Long, callback: Option[String])

GET     /api/timeline                   controllers.api.Timeline.index(page: Int ?= 1, count: Int ?= 10, callback: Option[String])

GET     /api/user                       controllers.api.User.index(callback: Option[String])
GET     /api/user/:id 		    		      controllers.api.User.item(id: Long, callback: Option[String])
GET     /api/user/startswith            controllers.api.User.startsWith(q: Option[String], callback: Option[String])
DELETE  /api/user/token/:token          controllers.api.User.deleteToken(token: String, callback: Option[String])
GET     /api/user/tokens/:userId        controllers.api.User.tokens(userId: Long, callback: Option[String])

GET     /api/workflow                   controllers.api.Workflow.index(callback: Option[String])
GET     /api/workflow/:id               controllers.api.Workflow.item(id: Long, callback: Option[String])
GET     /api/workflow/:id/statuses      controllers.api.Workflow.statuses(id: Long, callback: Option[String])

GET     /auth/forgot                    controllers.Auth.forgot
GET     /auth/login                     controllers.Auth.login(redirectUrl: String ?= "/")
GET     /auth/logout                    controllers.Auth.logout
GET     /auth/reset/:token              controllers.Auth.reset(token: String)
POST    /auth/forgot                    controllers.Auth.doForgot()
POST    /auth/login                     controllers.Auth.doLogin(redirectUrl: String ?= "/")
POST    /auth/reset/:token              controllers.Auth.doReset(token: String)

GET     /board/:projectId               controllers.Board.index(projectId: Long)

GET     /admin                          controllers.Admin.index

GET     /admin/user/create              controllers.admin.User.create
GET     /admin/user                     controllers.admin.User.index(page: Int ?= 1, count: Int ?= 10)
POST    /admin/user                     controllers.admin.User.add

GET     /project/create                 controllers.Project.create
GET     /project/edit/:id               controllers.Project.edit(id: Long)
GET     /project/:id                    controllers.Project.item(id: Long, page: Int ?= 1, count: Int ?= 10)
POST    /project/:id                    controllers.Project.update(id: Long)
GET     /project                        controllers.Project.index(page: Int ?= 1, count: Int ?= 10)
POST    /project                        controllers.Project.add

GET     /search                         controllers.Search.index(page: Int ?= 1, count: Int ?= 10, query: String ?= "*", sort: Option[String] = None, order: Option[String] = None)

POST    /ticket                         controllers.Ticket.add
GET     /ticket/create                  controllers.Ticket.create(project: Option[Long] ?= None)
GET     /ticket/:id                     controllers.Ticket.item(tab ?= "comments", id: String, page: Int ?= 1, count: Int ?= 10, query: String ?= "*")

POST    /ticket/:id                     controllers.Ticket.update(id: String)
GET     /ticket/edit/:id                controllers.Ticket.edit(id: String)

GET     /user/edit/:id                  controllers.User.edit(id: Long)
POST    /user/token/:userId             controllers.User.generateToken(userId: Long)
POST    /user/:id/password              controllers.User.updatePassword(id: Long)
POST    /user/:id                       controllers.User.update(id: Long)
GET     /user/:id                       controllers.User.item(id: Long, page: Int ?= 1, count: Int ?= 10)

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file                 controllers.Assets.at(path="/public", file)
